#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ƒë·ªÉ parse file RTF ch·ª©a HTML t·ª´ willhaben.at v√† tr√≠ch xu·∫•t d·ªØ li·ªáu JSON
"""

import json
import re
import sys
from pathlib import Path
from bs4 import BeautifulSoup

def extract_json_from_rtf(file_path):
    """
    ƒê·ªçc file RTF v√† tr√≠ch xu·∫•t d·ªØ li·ªáu JSON t·ª´ HTML content
    """
    print(f"üöÄ ƒê·ªçc file RTF: {file_path}")
    
    try:
        # ƒê·ªçc file RTF
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
        
        print(f"‚úÖ ƒê√£ ƒë·ªçc file: {len(content)} k√Ω t·ª±")
        
        # T√¨m HTML content trong RTF
        # RTF format th∆∞·ªùng c√≥ HTML ƒë∆∞·ª£c embed trong \f0\fs28
        html_match = re.search(r'\\f0\\fs28\s*(.*?)(?=\\f0|$)', content, re.DOTALL)
        
        if not html_match:
            print("‚ùå Kh√¥ng t√¨m th·∫•y HTML content trong RTF")
            return None
            
        html_content = html_match.group(1)
        print(f"üìÑ HTML content: {len(html_content)} k√Ω t·ª±")
        
        # Parse HTML v·ªõi BeautifulSoup
        soup = BeautifulSoup(html_content, 'html.parser')
        
        # T√¨m t·∫•t c·∫£ script tags
        script_tags = soup.find_all('script')
        print(f"üîç T√¨m th·∫•y {len(script_tags)} script tags")
        
        # T√¨m script tag ch·ª©a d·ªØ li·ªáu JSON (th∆∞·ªùng l√† script cu·ªëi c√πng)
        json_data = None
        for i, script in enumerate(script_tags):
            if script.string and script.string.strip():
                script_content = script.string.strip()
                print(f"üìú Script {i+1}: {len(script_content)} k√Ω t·ª±")
                
                # Ki·ªÉm tra xem c√≥ ph·∫£i JSON kh√¥ng
                if script_content.startswith('{') and script_content.endswith('}'):
                    try:
                        # Th·ª≠ parse JSON
                        json_obj = json.loads(script_content)
                        print(f"‚úÖ T√¨m th·∫•y JSON data trong script {i+1}")
                        json_data = json_obj
                        break
                    except json.JSONDecodeError:
                        print(f"‚ùå Script {i+1} kh√¥ng ph·∫£i JSON h·ª£p l·ªá")
                        continue
        
        if not json_data:
            print("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu JSON h·ª£p l·ªá")
            return None
            
        return json_data
        
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc file: {e}")
        return None

def extract_car_listings(json_data):
    """
    Tr√≠ch xu·∫•t danh s√°ch xe t·ª´ d·ªØ li·ªáu JSON
    """
    print("üîç T√¨m ki·∫øm d·ªØ li·ªáu xe trong JSON...")
    
    listings = []
    
    def search_in_dict(data, path=""):
        """T√¨m ki·∫øm ƒë·ªá quy trong dictionary"""
        if isinstance(data, dict):
            for key, value in data.items():
                current_path = f"{path}.{key}" if path else key
                
                # T√¨m c√°c key c√≥ th·ªÉ ch·ª©a danh s√°ch xe
                if key in ['adverts', 'ads', 'listings', 'results', 'items'] and isinstance(value, list):
                    print(f"üéØ T√¨m th·∫•y danh s√°ch t·∫°i: {current_path}")
                    for item in value:
                        if isinstance(item, dict):
                            listings.append(item)
                
                # Ti·∫øp t·ª•c t√¨m ki·∫øm ƒë·ªá quy
                search_in_dict(value, current_path)
                
        elif isinstance(data, list):
            for i, item in enumerate(data):
                search_in_dict(item, f"{path}[{i}]")
    
    search_in_dict(json_data)
    
    print(f"üìä T√¨m th·∫•y {len(listings)} listings")
    return listings

def parse_car_listing(listing):
    """
    Parse m·ªôt listing xe ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt
    """
    car_info = {}
    
    # C√°c tr∆∞·ªùng c√≥ th·ªÉ c√≥
    possible_fields = [
        'id', 'adId', 'advertId', 'adId',
        'title', 'name', 'headline', 'subject',
        'price', 'priceAmount', 'priceValue',
        'url', 'selfLink', 'link', 'href',
        'description', 'text', 'content',
        'location', 'city', 'region', 'address',
        'year', 'yearOfConstruction', 'constructionYear',
        'mileage', 'km', 'kilometers',
        'fuel', 'fuelType', 'engine',
        'power', 'hp', 'horsepower',
        'transmission', 'gear', 'gearbox',
        'color', 'paint',
        'brand', 'make', 'manufacturer',
        'model', 'type',
        'images', 'pictures', 'photos',
        'dealer', 'seller', 'contact',
        'date', 'created', 'published',
        'condition', 'state'
    ]
    
    def extract_value(obj, field_names):
        """T√¨m gi√° tr·ªã trong object v·ªõi nhi·ªÅu t√™n field c√≥ th·ªÉ"""
        if isinstance(obj, dict):
            for field_name in field_names:
                if field_name in obj:
                    return obj[field_name]
        return None
    
    # Tr√≠ch xu·∫•t t·ª´ng tr∆∞·ªùng
    for field in possible_fields:
        value = extract_value(listing, [field, field.lower(), field.upper()])
        if value is not None:
            car_info[field] = value
    
    # T√¨m ki·∫øm ƒë·ªá quy trong nested objects
    def deep_search(obj, target_fields):
        """T√¨m ki·∫øm s√¢u trong object"""
        if isinstance(obj, dict):
            for key, value in obj.items():
                if key.lower() in [f.lower() for f in target_fields]:
                    if key not in car_info:  # Ch·ªâ l·∫•y n·∫øu ch∆∞a c√≥
                        car_info[key] = value
                if isinstance(value, (dict, list)):
                    deep_search(value, target_fields)
        elif isinstance(obj, list):
            for item in obj:
                deep_search(item, target_fields)
    
    deep_search(listing, possible_fields)
    
    return car_info

def main():
    if len(sys.argv) != 2:
        print("Usage: python willhaben_rtf_parser.py <path_to_rtf_file>")
        sys.exit(1)
    
    file_path = sys.argv[1]
    
    if not Path(file_path).exists():
        print(f"‚ùå File kh√¥ng t·ªìn t·∫°i: {file_path}")
        sys.exit(1)
    
    # Tr√≠ch xu·∫•t JSON t·ª´ RTF
    json_data = extract_json_from_rtf(file_path)
    if not json_data:
        sys.exit(1)
    
    # Tr√≠ch xu·∫•t danh s√°ch xe
    listings = extract_car_listings(json_data)
    
    if not listings:
        print("‚ùå Kh√¥ng t√¨m th·∫•y danh s√°ch xe n√†o")
        sys.exit(1)
    
    # Parse t·ª´ng listing
    parsed_cars = []
    for i, listing in enumerate(listings[:10]):  # Ch·ªâ l·∫•y 10 ƒë·∫ßu ti√™n ƒë·ªÉ test
        print(f"\nüöó Parsing listing {i+1}...")
        car_info = parse_car_listing(listing)
        parsed_cars.append(car_info)
        
        # In th√¥ng tin c∆° b·∫£n
        print(f"   ID: {car_info.get('id', 'N/A')}")
        print(f"   Title: {car_info.get('title', 'N/A')}")
        print(f"   Price: {car_info.get('price', 'N/A')}")
        print(f"   URL: {car_info.get('url', 'N/A')}")
    
    # L∆∞u k·∫øt qu·∫£
    output_file = "willhaben_cars.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(parsed_cars, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ ƒê√£ l∆∞u {len(parsed_cars)} xe v√†o file: {output_file}")
    
    # In t·ªïng k·∫øt
    print(f"\nüìä T·ªïng k·∫øt:")
    print(f"   - T·ªïng s·ªë listings: {len(listings)}")
    print(f"   - ƒê√£ parse: {len(parsed_cars)}")
    print(f"   - File output: {output_file}")

if __name__ == "__main__":
    main()
