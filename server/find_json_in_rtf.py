#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ƒë·ªÉ t√¨m JSON th·ª±c s·ª± trong file RTF
"""

import json
import re
import sys
from pathlib import Path

def find_json_in_rtf(file_path):
    """
    T√¨m JSON th·ª±c s·ª± trong file RTF
    """
    print(f"üöÄ T√¨m JSON trong file RTF: {file_path}")
    
    try:
        # ƒê·ªçc file RTF
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
        
        print(f"‚úÖ ƒê√£ ƒë·ªçc file: {len(content)} k√Ω t·ª±")
        
        # T√¨m HTML content trong RTF
        html_match = re.search(r'\\f0\\fs28\s*(.*?)(?=\\f0|$)', content, re.DOTALL)
        
        if not html_match:
            print("‚ùå Kh√¥ng t√¨m th·∫•y HTML content trong RTF")
            return None
            
        html_content = html_match.group(1)
        print(f"üìÑ HTML content: {len(html_content)} k√Ω t·ª±")
        
        # T√¨m JSON object trong HTML
        # Pattern ƒë·ªÉ t√¨m JSON object b·∫Øt ƒë·∫ßu v·ªõi { v√† k·∫øt th√∫c v·ªõi }
        # T√¨m t·ª´ cu·ªëi file l√™n ƒë·ªÉ l·∫•y JSON l·ªõn nh·∫•t
        
        # T√¨m t·∫•t c·∫£ c√°c v·ªã tr√≠ c√≥ {
        open_braces = [m.start() for m in re.finditer(r'\{', html_content)]
        close_braces = [m.start() for m in re.finditer(r'\}', html_content)]
        
        print(f"üîç T√¨m th·∫•y {len(open_braces)} d·∫•u {{ v√† {len(close_braces)} d·∫•u }}")
        
        # T√¨m JSON object l·ªõn nh·∫•t
        largest_json = None
        largest_size = 0
        
        for start in open_braces:
            # T√¨m d·∫•u } t∆∞∆°ng ·ª©ng
            brace_count = 0
            end = -1
            
            for i in range(start, len(html_content)):
                if html_content[i] == '{':
                    brace_count += 1
                elif html_content[i] == '}':
                    brace_count -= 1
                    if brace_count == 0:
                        end = i
                        break
            
            if end != -1:
                json_candidate = html_content[start:end+1]
                
                # Ki·ªÉm tra xem c√≥ ph·∫£i JSON h·ª£p l·ªá kh√¥ng
                try:
                    json_obj = json.loads(json_candidate)
                    if len(json_candidate) > largest_size:
                        largest_size = len(json_candidate)
                        largest_json = json_obj
                        print(f"‚úÖ T√¨m th·∫•y JSON h·ª£p l·ªá: {len(json_candidate)} k√Ω t·ª±")
                        print(f"üîë Keys: {list(json_obj.keys())}")
                except json.JSONDecodeError:
                    continue
        
        if largest_json:
            return largest_json
        else:
            print("‚ùå Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá")
            return None
        
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc file: {e}")
        return None

def search_car_data(json_data):
    """
    T√¨m ki·∫øm d·ªØ li·ªáu xe trong JSON
    """
    print("üîç T√¨m ki·∫øm d·ªØ li·ªáu xe trong JSON...")
    
    def search_recursive(obj, path=""):
        """T√¨m ki·∫øm ƒë·ªá quy"""
        results = []
        
        if isinstance(obj, dict):
            for key, value in obj.items():
                current_path = f"{path}.{key}" if path else key
                
                # T√¨m c√°c key c√≥ th·ªÉ ch·ª©a d·ªØ li·ªáu xe
                if key.lower() in ['adverts', 'ads', 'listings', 'results', 'items', 'advert']:
                    if isinstance(value, list):
                        print(f"üéØ T√¨m th·∫•y danh s√°ch t·∫°i: {current_path} ({len(value)} items)")
                        results.extend(value)
                    elif isinstance(value, dict):
                        print(f"üéØ T√¨m th·∫•y object t·∫°i: {current_path}")
                        results.append(value)
                
                # Ti·∫øp t·ª•c t√¨m ki·∫øm
                results.extend(search_recursive(value, current_path))
                
        elif isinstance(obj, list):
            for i, item in enumerate(obj):
                results.extend(search_recursive(item, f"{path}[{i}]"))
        
        return results
    
    car_data = search_recursive(json_data)
    print(f"üìä T√¨m th·∫•y {len(car_data)} potential car data items")
    
    return car_data

def extract_car_info(item):
    """
    Tr√≠ch xu·∫•t th√¥ng tin xe t·ª´ m·ªôt item
    """
    car_info = {}
    
    if isinstance(item, dict):
        # C√°c tr∆∞·ªùng c√≥ th·ªÉ c√≥
        fields_to_extract = [
            'id', 'adId', 'advertId', 'adId',
            'title', 'name', 'headline', 'subject',
            'price', 'priceAmount', 'priceValue',
            'url', 'selfLink', 'link', 'href',
            'description', 'text', 'content',
            'location', 'city', 'region', 'address',
            'year', 'yearOfConstruction', 'constructionYear',
            'mileage', 'km', 'kilometers',
            'fuel', 'fuelType', 'engine',
            'power', 'hp', 'horsepower',
            'transmission', 'gear', 'gearbox',
            'color', 'paint',
            'brand', 'make', 'manufacturer',
            'model', 'type',
            'images', 'pictures', 'photos',
            'dealer', 'seller', 'contact',
            'date', 'created', 'published',
            'condition', 'state'
        ]
        
        for field in fields_to_extract:
            if field in item:
                car_info[field] = item[field]
    
    return car_info

def main():
    if len(sys.argv) != 2:
        print("Usage: python find_json_in_rtf.py <path_to_rtf_file>")
        sys.exit(1)
    
    file_path = sys.argv[1]
    
    if not Path(file_path).exists():
        print(f"‚ùå File kh√¥ng t·ªìn t·∫°i: {file_path}")
        sys.exit(1)
    
    # T√¨m JSON trong RTF
    json_data = find_json_in_rtf(file_path)
    if not json_data:
        print("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu JSON h·ª£p l·ªá")
        sys.exit(1)
    
    # T√¨m ki·∫øm d·ªØ li·ªáu xe
    car_data = search_car_data(json_data)
    
    if not car_data:
        print("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu xe n√†o")
        sys.exit(1)
    
    # Tr√≠ch xu·∫•t th√¥ng tin t·ª´ c√°c items
    parsed_cars = []
    for i, item in enumerate(car_data[:10]):  # Ch·ªâ l·∫•y 10 ƒë·∫ßu ti√™n
        print(f"\nüöó Parsing item {i+1}...")
        car_info = extract_car_info(item)
        parsed_cars.append(car_info)
        
        # In th√¥ng tin c∆° b·∫£n
        print(f"   ID: {car_info.get('id', 'N/A')}")
        print(f"   Title: {car_info.get('title', 'N/A')}")
        print(f"   Price: {car_info.get('price', 'N/A')}")
        print(f"   URL: {car_info.get('url', 'N/A')}")
    
    # L∆∞u k·∫øt qu·∫£
    output_file = "willhaben_cars_found.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(parsed_cars, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ ƒê√£ l∆∞u {len(parsed_cars)} xe v√†o file: {output_file}")
    
    # In t·ªïng k·∫øt
    print(f"\nüìä T·ªïng k·∫øt:")
    print(f"   - T·ªïng s·ªë items: {len(car_data)}")
    print(f"   - ƒê√£ parse: {len(parsed_cars)}")
    print(f"   - File output: {output_file}")

if __name__ == "__main__":
    main()
